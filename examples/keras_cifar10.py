'''
Example from keras
'''

import os

import keras
from keras.datasets import cifar10
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation, Flatten
from keras.layers import Conv2D, MaxPooling2D

from elefas.hyperparameters import Choice, Linear, Exponential, Boolean
from elefas.optimizations import Random

SAVE_DIR = os.path.join(os.getcwd(), 'saved_models')
NUM_CLASSES = 10

# Load data
(x_train, y_train), (x_test, y_test) = cifar10.load_data()
print('x_train shape:', x_train.shape)
print(x_train.shape[0], 'train samples')
print(x_test.shape[0], 'test samples')

# x_train = x_train[:2000]
# y_train = y_train[:2000]

y_train = keras.utils.to_categorical(y_train, NUM_CLASSES)
y_test = keras.utils.to_categorical(y_test, NUM_CLASSES)

# Prepare hyper-parameters
space = Random(10)

space.add(Exponential('batch_size', 8, 128))
space.add(Exponential('lr', 0.00001, 0.001))
space.add(Linear('epochs', 20, 200))
space.add(Choice(['conv_activation', 'dense_activation'], ['relu', 'tanh', 'sigmoid']))

# space.add(Boolean('data_augmentation'))
data_augmentation = False

space.compile()

best_accuracy = 0
best_p = None

for p in space():
    print('Exploring: ', p)

    model_name = 'keras_cifar10_trained_model-{:04d}.h5'.format(space.n_accessed)

    model = Sequential()
    model.add(Conv2D(32, (3, 3), padding='same', input_shape=x_train.shape[1:]))
    model.add(Activation(p['conv_activation']))
    model.add(Conv2D(32, (3, 3)))
    model.add(Activation(p['conv_activation']))
    model.add(MaxPooling2D(pool_size=(2, 2)))
    model.add(Dropout(0.25))

    model.add(Conv2D(64, (3, 3), padding='same'))
    model.add(Activation(p['conv_activation']))
    model.add(Conv2D(64, (3, 3)))
    model.add(Activation(p['conv_activation']))
    model.add(MaxPooling2D(pool_size=(2, 2)))
    model.add(Dropout(0.25))

    model.add(Flatten())
    model.add(Dense(512))
    model.add(Activation(p['dense_activation']))
    model.add(Dropout(0.5))
    model.add(Dense(NUM_CLASSES))
    model.add(Activation('softmax'))

    # initiate RMSprop optimizer
    opt = keras.optimizers.rmsprop(lr=p['lr'], decay=1e-6)

    # Let's train the model using RMSprop
    model.compile(loss='categorical_crossentropy',
                  optimizer=opt,
                  metrics=['accuracy'])

    x_train = x_train.astype('float32')
    x_test = x_test.astype('float32')
    x_train /= 255
    x_test /= 255

    if not data_augmentation:
        print('Not using data augmentation.')
        model.fit(x_train, y_train,
                  batch_size=p['batch_size'],
                  epochs=p['epochs'],
                  validation_data=(x_test, y_test),
                  shuffle=True,
                  verbose=2)
    else:
        print('Using real-time data augmentation.')
        # This will do preprocessing and realtime data augmentation:
        datagen = ImageDataGenerator(
            featurewise_center=False,  # set input mean to 0 over the dataset
            samplewise_center=False,  # set each sample mean to 0
            featurewise_std_normalization=False,  # divide inputs by std of the dataset
            samplewise_std_normalization=False,  # divide each input by its std
            zca_whitening=False,  # apply ZCA whitening
            rotation_range=0,  # randomly rotate images in the range (degrees, 0 to 180)
            width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)
            height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)
            horizontal_flip=True,  # randomly flip images
            vertical_flip=False)  # randomly flip images

        # Compute quantities required for feature-wise normalization
        # (std, mean, and principal components if ZCA whitening is applied).
        datagen.fit(x_train)

        # Fit the model on the batches generated by datagen.flow().
        model.fit_generator(datagen.flow(x_train, y_train,
                                         batch_size=p['batch_size']),
                            epochs=p['epochs'],
                            validation_data=(x_test, y_test),
                            workers=4)

    # Save model and weights
    os.makedirs(SAVE_DIR, exist_ok=True)
    model_path = os.path.join(SAVE_DIR, model_name)
    model.save(model_path)
    print('Saved trained model at %s ' % model_path)

    # Score trained model.
    scores = model.evaluate(x_test, y_test, verbose=1)
    accuracy = scores[1]
    print('Test loss:', scores[0])
    print('Test accuracy:', accuracy)

    if accuracy > best_accuracy:
        best_accuracy = accuracy
        best_p = p
        print('This is new best accuracy')
    else:
        print('Best accuracy so far is {} for {}'.format(best_accuracy, best_p))



space.summary()
